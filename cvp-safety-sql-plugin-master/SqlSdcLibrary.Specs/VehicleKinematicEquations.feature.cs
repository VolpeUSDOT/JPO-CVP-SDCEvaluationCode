// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SqlSdcLibrary.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("VehicleKinematicEquations")]
    public partial class VehicleKinematicEquationsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "VehicleKinematicEquations.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "VehicleKinematicEquations", "\tas a developer and domain level expert\r\n\tI want to be make sure the Vehicle kine" +
                    "matic equations are implemented correctly", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("chapter 2.6.01. calculating Northing and Easting based on Latitude and Longitude")]
        public virtual void Chapter2_6_01_CalculatingNorthingAndEastingBasedOnLatitudeAndLongitude()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("chapter 2.6.01. calculating Northing and Easting based on Latitude and Longitude", null, ((string[])(null)));
#line 5
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "VehicleId",
                        "Latitude",
                        "Longitude",
                        "Projection"});
            table3.AddRow(new string[] {
                        "1",
                        "37.81945",
                        "-122.34544",
                        "4326"});
            table3.AddRow(new string[] {
                        "2",
                        "37.81971",
                        "-122.34355",
                        "4326"});
            table3.AddRow(new string[] {
                        "3",
                        "42.292488",
                        "-83.736084",
                        "4326"});
            table3.AddRow(new string[] {
                        "4",
                        "42.292126",
                        "-83.736412",
                        "4326"});
#line 6
 testRunner.Given("vehicles", ((string)(null)), table3, "Given ");
#line 12
 testRunner.When("calculating Northing and Easting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "VehicleId",
                        "Northing",
                        "Easting",
                        "Zona"});
            table4.AddRow(new string[] {
                        "1",
                        "4185984.71",
                        "557609.54",
                        "10S"});
            table4.AddRow(new string[] {
                        "2",
                        "4186014.72",
                        "557775.68",
                        "10S"});
            table4.AddRow(new string[] {
                        "3",
                        "4685877.26",
                        "274436.43",
                        "17T"});
            table4.AddRow(new string[] {
                        "4",
                        "4685837.93",
                        "274408.09",
                        "17T"});
#line 13
 testRunner.Then("the result should be", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("chapter 2.6.01. calculating NorthOffset and EastOffset between two vehicles")]
        public virtual void Chapter2_6_01_CalculatingNorthOffsetAndEastOffsetBetweenTwoVehicles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("chapter 2.6.01. calculating NorthOffset and EastOffset between two vehicles", null, ((string[])(null)));
#line 20
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "VehicleId",
                        "Latitude",
                        "Longitude",
                        "Projection"});
            table5.AddRow(new string[] {
                        "1",
                        "37.81945",
                        "-122.34544",
                        "4326"});
            table5.AddRow(new string[] {
                        "2",
                        "37.81971",
                        "-122.34355",
                        "4326"});
            table5.AddRow(new string[] {
                        "3",
                        "42.292488",
                        "-83.736084",
                        "4326"});
            table5.AddRow(new string[] {
                        "4",
                        "42.292126",
                        "-83.736412",
                        "4326"});
#line 21
 testRunner.Given("vehicles", ((string)(null)), table5, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "LinkId",
                        "HostVehicleId",
                        "RemoteVehicleId"});
            table6.AddRow(new string[] {
                        "1",
                        "1",
                        "2"});
            table6.AddRow(new string[] {
                        "2",
                        "3",
                        "4"});
#line 27
 testRunner.And("the following vehicles are associated with one-another", ((string)(null)), table6, "And ");
#line 31
 testRunner.When("calculating NorthOffset and EastOffset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "LinkId",
                        "NorthOffset",
                        "EastOffset"});
            table7.AddRow(new string[] {
                        "1",
                        "30.014",
                        "166.143"});
            table7.AddRow(new string[] {
                        "2",
                        "-39.329",
                        "-28.335"});
#line 32
 testRunner.Then("the result for northOffset and EastOffset should be", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("chapter 2.6.01. calculating Range")]
        public virtual void Chapter2_6_01_CalculatingRange()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("chapter 2.6.01. calculating Range", null, ((string[])(null)));
#line 37
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "VehicleId",
                        "Latitude",
                        "Longitude",
                        "Projection"});
            table8.AddRow(new string[] {
                        "1",
                        "37.81945",
                        "-122.34544",
                        "4326"});
            table8.AddRow(new string[] {
                        "2",
                        "37.81971",
                        "-122.34355",
                        "4326"});
            table8.AddRow(new string[] {
                        "3",
                        "42.292488",
                        "-83.736084",
                        "4326"});
            table8.AddRow(new string[] {
                        "4",
                        "42.292126",
                        "-83.736412",
                        "4326"});
#line 38
 testRunner.Given("vehicles", ((string)(null)), table8, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "LinkId",
                        "HostVehicleId",
                        "RemoteVehicleId"});
            table9.AddRow(new string[] {
                        "1",
                        "1",
                        "2"});
            table9.AddRow(new string[] {
                        "2",
                        "3",
                        "4"});
#line 44
 testRunner.And("the following vehicles are associated with one-another", ((string)(null)), table9, "And ");
#line 48
 testRunner.When("calculating Range", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "LinkId",
                        "Range"});
            table10.AddRow(new string[] {
                        "1",
                        "168.83"});
            table10.AddRow(new string[] {
                        "2",
                        "48.47"});
#line 49
 testRunner.Then("the range should be", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("chapter 2.6.02. calculating Range Rate")]
        public virtual void Chapter2_6_02_CalculatingRangeRate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("chapter 2.6.02. calculating Range Rate", null, ((string[])(null)));
#line 54
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "ScaledDRangeId",
                        "Range1",
                        "Range2",
                        "Range3",
                        "Range4"});
            table11.AddRow(new string[] {
                        "1",
                        "350",
                        "500",
                        "750",
                        "900"});
            table11.AddRow(new string[] {
                        "2",
                        "350",
                        "500",
                        "750",
                        "900"});
#line 55
 testRunner.Given("an ScaledDRange time serie", ((string)(null)), table11, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "ScaledDRangeId",
                        "dT"});
            table12.AddRow(new string[] {
                        "1",
                        "20"});
            table12.AddRow(new string[] {
                        "2",
                        "10"});
#line 59
 testRunner.And("a dT time difference between data points", ((string)(null)), table12, "And ");
#line 63
 testRunner.When("calculating Range Rate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "ScaledDRangeId",
                        "RangeRate"});
            table13.AddRow(new string[] {
                        "1",
                        "8.75"});
            table13.AddRow(new string[] {
                        "2",
                        "17.5"});
#line 64
 testRunner.Then("the range rate result should be", ((string)(null)), table13, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("chapter 2.6.02. calculating Range Rate for real time-serie")]
        public virtual void Chapter2_6_02_CalculatingRangeRateForRealTime_Serie()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("chapter 2.6.02. calculating Range Rate for real time-serie", null, ((string[])(null)));
#line 69
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "PositionId",
                        "Latitude",
                        "Longitude",
                        "Projection"});
            table14.AddRow(new string[] {
                        "1",
                        "42.292488",
                        "-83.736084",
                        "4326"});
            table14.AddRow(new string[] {
                        "2",
                        "42.292473",
                        "-83.736099",
                        "4326"});
            table14.AddRow(new string[] {
                        "3",
                        "42.292473",
                        "-83.736099",
                        "4326"});
            table14.AddRow(new string[] {
                        "4",
                        "42.292446",
                        "-83.73613",
                        "4326"});
#line 70
 testRunner.Given("Host vehicle with locations over time", ((string)(null)), table14, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "PositionId",
                        "Latitude",
                        "Longitude",
                        "Projection"});
            table15.AddRow(new string[] {
                        "1",
                        "42.292126",
                        "-83.736412",
                        "4326"});
            table15.AddRow(new string[] {
                        "2",
                        "42.292118",
                        "-83.736427",
                        "4326"});
            table15.AddRow(new string[] {
                        "3",
                        "42.292107",
                        "-83.736435",
                        "4326"});
            table15.AddRow(new string[] {
                        "4",
                        "42.292107",
                        "-83.736435",
                        "4326"});
#line 76
 testRunner.Given("Remote vehicle with locations over time", ((string)(null)), table15, "Given ");
#line 82
 testRunner.And("dt is 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
 testRunner.When("calculating Range Rate for vehicles", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 84
 testRunner.Then("the Range Rate should be -0.0226", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("chapter 2.6.03. calculating Time-to-Collision (TTC) in seconds")]
        public virtual void Chapter2_6_03_CalculatingTime_To_CollisionTTCInSeconds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("chapter 2.6.03. calculating Time-to-Collision (TTC) in seconds", null, ((string[])(null)));
#line 86
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Range",
                        "RangeRate"});
            table16.AddRow(new string[] {
                        "1",
                        "48.473431953926465",
                        "-0.0226"});
            table16.AddRow(new string[] {
                        "2",
                        "47.830103223411768",
                        "-0.0226"});
            table16.AddRow(new string[] {
                        "3",
                        "49.211435846626948",
                        "-0.0226"});
            table16.AddRow(new string[] {
                        "4",
                        "45.294413802431613",
                        "-0.0226"});
#line 87
 testRunner.Given("a Range and RangeRate", ((string)(null)), table16, "Given ");
#line 93
 testRunner.When("calculating Time-to-Collision", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "TimeToCollision"});
            table17.AddRow(new string[] {
                        "1",
                        "-2144.842"});
            table17.AddRow(new string[] {
                        "2",
                        "-2116.376"});
            table17.AddRow(new string[] {
                        "3",
                        "-2177.497"});
            table17.AddRow(new string[] {
                        "4",
                        "-2004.177"});
#line 94
 testRunner.Then("the Time-to-collision result should be", ((string)(null)), table17, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("chapter 2.6.04. Calculate HVSlope")]
        public virtual void Chapter2_6_04_CalculateHVSlope()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("chapter 2.6.04. Calculate HVSlope", null, ((string[])(null)));
#line 101
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Heading"});
            table18.AddRow(new string[] {
                        "1",
                        "45"});
            table18.AddRow(new string[] {
                        "2",
                        "135"});
            table18.AddRow(new string[] {
                        "3",
                        "215"});
            table18.AddRow(new string[] {
                        "4",
                        "315"});
            table18.AddRow(new string[] {
                        "5",
                        "50"});
#line 102
 testRunner.Given("the following heading", ((string)(null)), table18, "Given ");
#line 109
 testRunner.When("calculating the HVSlope", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Slope"});
            table19.AddRow(new string[] {
                        "1",
                        "1"});
            table19.AddRow(new string[] {
                        "2",
                        "-1"});
            table19.AddRow(new string[] {
                        "3",
                        "1.42"});
            table19.AddRow(new string[] {
                        "4",
                        "-0.99"});
            table19.AddRow(new string[] {
                        "5",
                        "0.83"});
#line 110
 testRunner.Then("the HVSlope result should be", ((string)(null)), table19, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("chapter 2.6.04. calculating Longitudinal Range")]
        public virtual void Chapter2_6_04_CalculatingLongitudinalRange()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("chapter 2.6.04. calculating Longitudinal Range", null, ((string[])(null)));
#line 118
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "VehicleId",
                        "Latitude",
                        "Longitude",
                        "Projection"});
            table20.AddRow(new string[] {
                        "1",
                        "37.81945",
                        "-122.34544",
                        "4326"});
            table20.AddRow(new string[] {
                        "2",
                        "37.81971",
                        "-122.34355",
                        "4326"});
            table20.AddRow(new string[] {
                        "3",
                        "42.292488",
                        "-83.736084",
                        "4326"});
            table20.AddRow(new string[] {
                        "4",
                        "42.292126",
                        "-83.736412",
                        "4326"});
#line 119
 testRunner.Given("vehicles", ((string)(null)), table20, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "LinkId",
                        "HostVehicleId",
                        "RemoteVehicleId"});
            table21.AddRow(new string[] {
                        "1",
                        "1",
                        "2"});
            table21.AddRow(new string[] {
                        "2",
                        "3",
                        "4"});
#line 125
 testRunner.And("the following vehicles are associated with one-another", ((string)(null)), table21, "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "VehicleId",
                        "Heading"});
            table22.AddRow(new string[] {
                        "1",
                        "66"});
            table22.AddRow(new string[] {
                        "3",
                        "217.0"});
#line 129
 testRunner.And("Heading of", ((string)(null)), table22, "And ");
#line 133
 testRunner.When("calculating the Longitudinal Range", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "LinkId",
                        "LongRange"});
            table23.AddRow(new string[] {
                        "1",
                        "163.987"});
            table23.AddRow(new string[] {
                        "2",
                        "48.462"});
#line 134
 testRunner.Then("the Longitudinal Range results should be", ((string)(null)), table23, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("chapter 2.6.04. calculating Latitudinal Range")]
        public virtual void Chapter2_6_04_CalculatingLatitudinalRange()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("chapter 2.6.04. calculating Latitudinal Range", null, ((string[])(null)));
#line 139
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "VehicleId",
                        "Latitude",
                        "Longitude",
                        "Projection"});
            table24.AddRow(new string[] {
                        "1",
                        "37.81945",
                        "-122.34544",
                        "4326"});
            table24.AddRow(new string[] {
                        "2",
                        "37.81971",
                        "-122.34355",
                        "4326"});
            table24.AddRow(new string[] {
                        "3",
                        "42.292488",
                        "-83.736084",
                        "4326"});
            table24.AddRow(new string[] {
                        "4",
                        "42.292126",
                        "-83.736412",
                        "4326"});
#line 140
 testRunner.Given("vehicles", ((string)(null)), table24, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "LinkId",
                        "HostVehicleId",
                        "RemoteVehicleId"});
            table25.AddRow(new string[] {
                        "1",
                        "1",
                        "2"});
            table25.AddRow(new string[] {
                        "2",
                        "3",
                        "4"});
#line 146
 testRunner.And("the following vehicles are associated with one-another", ((string)(null)), table25, "And ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "VehicleId",
                        "Heading"});
            table26.AddRow(new string[] {
                        "1",
                        "66"});
            table26.AddRow(new string[] {
                        "3",
                        "217.0"});
#line 150
 testRunner.And("Heading of", ((string)(null)), table26, "And ");
#line 154
 testRunner.When("calculating the Latitudinal Range", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "LinkId",
                        "LatRange"});
            table27.AddRow(new string[] {
                        "1",
                        "40.157"});
            table27.AddRow(new string[] {
                        "2",
                        "-1.039"});
#line 155
 testRunner.Then("the Latitudinal Range should be", ((string)(null)), table27, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("chapter 2.6.05. Relative Latitudinal and Longitudinal Positions")]
        public virtual void Chapter2_6_05_RelativeLatitudinalAndLongitudinalPositions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("chapter 2.6.05. Relative Latitudinal and Longitudinal Positions", null, ((string[])(null)));
#line 160
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "VehicleId",
                        "Latitude",
                        "Longitude",
                        "Projection"});
            table28.AddRow(new string[] {
                        "1",
                        "37.81945",
                        "-122.34544",
                        "4326"});
            table28.AddRow(new string[] {
                        "2",
                        "37.81971",
                        "-122.34355",
                        "4326"});
            table28.AddRow(new string[] {
                        "3",
                        "42.292488",
                        "-83.736084",
                        "4326"});
            table28.AddRow(new string[] {
                        "4",
                        "42.292126",
                        "-83.736412",
                        "4326"});
#line 161
 testRunner.Given("vehicles", ((string)(null)), table28, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "VehicleId",
                        "Length",
                        "Width"});
            table29.AddRow(new string[] {
                        "1",
                        "3.50",
                        "3.50"});
            table29.AddRow(new string[] {
                        "2",
                        "3.50",
                        "3.50"});
            table29.AddRow(new string[] {
                        "3",
                        "3.50",
                        "3.50"});
            table29.AddRow(new string[] {
                        "4",
                        "3.50",
                        "3.50"});
#line 167
 testRunner.And("car length and width", ((string)(null)), table29, "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "LinkId",
                        "HostVehicleId",
                        "RemoteVehicleId"});
            table30.AddRow(new string[] {
                        "1",
                        "1",
                        "2"});
            table30.AddRow(new string[] {
                        "2",
                        "3",
                        "4"});
#line 173
 testRunner.And("the following vehicles are associated with one-another", ((string)(null)), table30, "And ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "VehicleId",
                        "Heading"});
            table31.AddRow(new string[] {
                        "1",
                        "60"});
            table31.AddRow(new string[] {
                        "3",
                        "217.0"});
#line 177
 testRunner.And("Heading of", ((string)(null)), table31, "And ");
#line 181
 testRunner.When("calculating the Relative Latitudinal and Longitudinal Positions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "LinkId",
                        "RelativeLongLocation",
                        "RelativeLatLocation"});
            table32.AddRow(new string[] {
                        "1",
                        "Front",
                        "Right"});
            table32.AddRow(new string[] {
                        "2",
                        "Front",
                        "Center"});
#line 182
 testRunner.Then("the Relative Latitudinal and Longitudinal Positions results should be", ((string)(null)), table32, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("chapter 2.6.06. Precise Relative Location")]
        public virtual void Chapter2_6_06_PreciseRelativeLocation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("chapter 2.6.06. Precise Relative Location", null, ((string[])(null)));
#line 187
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "VehicleId",
                        "Latitude",
                        "Longitude",
                        "Projection"});
            table33.AddRow(new string[] {
                        "1",
                        "42.292488",
                        "-83.736084",
                        "4326"});
            table33.AddRow(new string[] {
                        "2",
                        "42.292126",
                        "-83.736412",
                        "4326"});
#line 188
 testRunner.Given("vehicles", ((string)(null)), table33, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "VehicleId",
                        "Length",
                        "Width"});
            table34.AddRow(new string[] {
                        "1",
                        "3.50",
                        "3.50"});
            table34.AddRow(new string[] {
                        "2",
                        "3.50",
                        "3.50"});
#line 192
 testRunner.And("car length and width", ((string)(null)), table34, "And ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "LinkId",
                        "HostVehicleId",
                        "RemoteVehicleId"});
            table35.AddRow(new string[] {
                        "1",
                        "1",
                        "2"});
#line 196
 testRunner.And("the following vehicles are associated with one-another", ((string)(null)), table35, "And ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "VehicleId",
                        "Heading"});
            table36.AddRow(new string[] {
                        "1",
                        "217.0"});
            table36.AddRow(new string[] {
                        "2",
                        "212.8"});
#line 199
 testRunner.And("Heading of", ((string)(null)), table36, "And ");
#line 203
 testRunner.When("calculating the Precise Relative Location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "LinkId",
                        "PreciseRelativeLocation"});
            table37.AddRow(new string[] {
                        "1",
                        "FcwEeblInPathTarget"});
#line 204
 testRunner.Then("the Precise Relative Location results should be", ((string)(null)), table37, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("chapter 2.6.11. Distance to Point of Interest")]
        public virtual void Chapter2_6_11_DistanceToPointOfInterest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("chapter 2.6.11. Distance to Point of Interest", null, ((string[])(null)));
#line 208
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "PointId",
                        "Latitude",
                        "Longitude",
                        "Projection"});
            table38.AddRow(new string[] {
                        "1",
                        "42.292488",
                        "-83.736084",
                        "4326"});
            table38.AddRow(new string[] {
                        "2",
                        "42.292126",
                        "-83.736412",
                        "4326"});
#line 209
 testRunner.Given("two points", ((string)(null)), table38, "Given ");
#line 213
 testRunner.When("calculating the Distance to Point of Interest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 214
 testRunner.Then("the Distance to Point of Interest should be 48.392", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
