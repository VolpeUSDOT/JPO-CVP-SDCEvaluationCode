// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SqlSdcLibrary.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ValidateRangeRate")]
    public partial class ValidateRangeRateFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ValidateRangeRateAgainstBsmDataSetSteps.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ValidateRangeRate", "\tIn order to make sure the RangeRate calculation is implemented correctly\r\n\tAs a " +
                    "domain expert\r\n\tI want to validate the results of the example data set to the ac" +
                    "tual calculations of the functions", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate RangeRate BSM sample data set against calculation")]
        public virtual void ValidateRangeRateBSMSampleDataSetAgainstCalculation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate RangeRate BSM sample data set against calculation", null, ((string[])(null)));
#line 6
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "HV_Time",
                        "HV_Latitude",
                        "HV_Longitude",
                        "RV_Latitude",
                        "RV_Longitude",
                        "Range",
                        "RangeRate"});
            table1.AddRow(new string[] {
                        "1",
                        "42.29249",
                        "-83.7361",
                        "42.29213",
                        "-83.7364",
                        "47.034",
                        "NaN"});
            table1.AddRow(new string[] {
                        "2",
                        "42.29247",
                        "-83.7361",
                        "42.29212",
                        "-83.7364",
                        "46.093",
                        "NaN"});
            table1.AddRow(new string[] {
                        "3",
                        "42.29247",
                        "-83.7361",
                        "42.29211",
                        "-83.7364",
                        "47.034",
                        "NaN"});
            table1.AddRow(new string[] {
                        "4",
                        "42.29245",
                        "-83.7361",
                        "42.29211",
                        "-83.7364",
                        "45.16",
                        "-10.77"});
            table1.AddRow(new string[] {
                        "5",
                        "42.29245",
                        "-83.7361",
                        "42.29208",
                        "-83.7365",
                        "52.713",
                        "45.35"});
            table1.AddRow(new string[] {
                        "6",
                        "42.29242",
                        "-83.7362",
                        "42.29207",
                        "-83.7365",
                        "46.093",
                        "-26.02"});
            table1.AddRow(new string[] {
                        "7",
                        "42.29241",
                        "-83.7362",
                        "42.29207",
                        "-83.7365",
                        "45.16",
                        "-15.06"});
            table1.AddRow(new string[] {
                        "8",
                        "42.29239",
                        "-83.7362",
                        "42.29205",
                        "-83.7365",
                        "45.16",
                        "-8.95"});
            table1.AddRow(new string[] {
                        "9",
                        "42.29238",
                        "-83.7362",
                        "42.29204",
                        "-83.7365",
                        "45.16",
                        "-0.93"});
            table1.AddRow(new string[] {
                        "10",
                        "42.29237",
                        "-83.7362",
                        "42.29203",
                        "-83.7365",
                        "45.16",
                        "0.00"});
            table1.AddRow(new string[] {
                        "11",
                        "42.29235",
                        "-83.7362",
                        "42.29202",
                        "-83.7365",
                        "44.234",
                        "-6.02"});
            table1.AddRow(new string[] {
                        "12",
                        "42.29234",
                        "-83.7362",
                        "42.29201",
                        "-83.7365",
                        "44.234",
                        "-2.31"});
            table1.AddRow(new string[] {
                        "13",
                        "42.29232",
                        "-83.7362",
                        "42.292",
                        "-83.7365",
                        "43.318",
                        "-6.88"});
#line 7
 testRunner.Given("the following BSM sample data set", ((string)(null)), table1, "Given ");
#line 22
 testRunner.When("I calculate the Range and RangeRate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
 testRunner.Then("the results within the data set should match with the calculated results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate RangeRate BSM sample data set against calculation - Using real data")]
        public virtual void ValidateRangeRateBSMSampleDataSetAgainstCalculation_UsingRealData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate RangeRate BSM sample data set against calculation - Using real data", null, ((string[])(null)));
#line 26
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "HV_Time",
                        "HV_Latitude",
                        "HV_Longitude",
                        "RV_Latitude",
                        "RV_Longitude",
                        "Range",
                        "RangeRate"});
            table2.AddRow(new string[] {
                        "1",
                        "41.1503639221191",
                        "-104.657737731934",
                        "41.15212631",
                        "-104.6603699",
                        "295.06",
                        "NaN"});
            table2.AddRow(new string[] {
                        "2",
                        "41.1503639221191",
                        "-104.657737731934",
                        "41.15209961",
                        "-104.6603546",
                        "292.14",
                        "NaN"});
            table2.AddRow(new string[] {
                        "3",
                        "41.1503639221191",
                        "-104.657737731934",
                        "41.15208817",
                        "-104.660347",
                        "290.82",
                        "NaN"});
            table2.AddRow(new string[] {
                        "4",
                        "41.1503639221191",
                        "-104.657737731934",
                        "41.15207672",
                        "-104.6603394",
                        "289.51",
                        "-14.76"});
            table2.AddRow(new string[] {
                        "5",
                        "41.1503639221191",
                        "-104.657737731934",
                        "41.15206909",
                        "-104.6603317",
                        "288.46",
                        "-11.38"});
#line 27
 testRunner.Given("the following BSM sample data set", ((string)(null)), table2, "Given ");
#line 34
 testRunner.When("I calculate the Range and RangeRate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 35
 testRunner.Then("the results within the data set should match with the calculated results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
