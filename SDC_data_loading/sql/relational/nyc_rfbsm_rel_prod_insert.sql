----------------------------------------------------------------------------------------------------
-- This script inserts relational data into relational tables from nyc_rfbsm_staging table (which has nested JSON data).
-- Two temporary tables are deleted at the end of the script.
-- Relational tables 
--   nyc_rfbsm_core
--   nyc_rfbsm_partii
--   nyc_rfbsm_partii_crumbdata
----------------------------------------------------------------------------------------------------

--------------------------------------------------
-- create tables
--------------------------------------------------
CREATE TABLE IF NOT EXISTS nyc_rfbsm_core(
    coreid string,
    RFID string,
    ROLE string,
    BSMTIMEYEAR int,
    BSMTIMEMONTH int,
    BSMTIMEDAY int,
    BSMTIMEHOUR int,
    BSMTIMEMINUTE int,
    BSMTIMESECOND int,
    BSMMSGHEADERMYRFLEVEL int,
    BSMMSGHEADERAUTHENTICATED boolean,
    BSMBSMMSGCOREDATAMSGCNT int,
    BSMBSMMSGCOREDATAID string,
    BSMBSMMSGCOREDATASECMARK int,
    BSMBSMMSGCOREDATALAT bigint,
    BSMBSMMSGCOREDATALONG bigint,
    BSMBSMMSGCOREDATAELEV int,
    BSMBSMMSGCOREDATAACCURACYSEMIMAJOR int,
    BSMBSMMSGCOREDATAACCURACYSEMIMINOR int,
    BSMBSMMSGCOREDATAACCURACYORIENTATION int,
    BSMBSMMSGCOREDATATRANSMISSION string,
    BSMBSMMSGCOREDATASPEED int,
    BSMBSMMSGCOREDATAHEADING int,
    BSMBSMMSGCOREDATAANGLE int,
    BSMBSMMSGCOREDATAACCELSETLONG int,
    BSMBSMMSGCOREDATAACCELSETLAT int,
    BSMBSMMSGCOREDATAACCELSETVERT int,
    BSMBSMMSGCOREDATAACCELSETYAW int,
    BSMBSMMSGCOREDATABRAKESWHEELBRAKES string,
    BSMBSMMSGCOREDATABRAKESTRACTION string,
    BSMBSMMSGCOREDATABRAKESABS string,
    BSMBSMMSGCOREDATABRAKESSCS string,
    BSMBSMMSGCOREDATABRAKESBRAKEBOOST string,
    BSMBSMMSGCOREDATABRAKESAUXBRAKES string,
    BSMBSMMSGCOREDATASIZEWIDTH string,
    BSMBSMMSGCOREDATASIZELENGTH string
);
    
CREATE TABLE IF NOT EXISTS nyc_rfbsm_partii(
    partiiid string,
    coreid string,
    ID int,
    PATHPREDICTIONRADIUSOFCURVE bigint,
    PATHPREDICTIONCONFIDENCE int,
    CLASSIFICATION int,
    VEHICLEDATAHEIGHT int,
    VEHICLEDATAMASS int
);

CREATE TABLE IF NOT EXISTS nyc_rfbsm_partii_crumbdata(
    partiiid string,
    coreid string,
    LATOFFSET int,
    LONOFFSET int,
    ELEVATIONOFFSET int,
    TIMEOFFSET int
);

--------------------------------------------------
-- drop the _tmp tables
--------------------------------------------------
DROP TABLE IF EXISTS nyc_rfbsm_tmp;
DROP TABLE IF EXISTS nyc_rfbsm_partii_tmp;

CREATE TABLE nyc_rfbsm_tmp 
STORED AS ORC tblproperties("orc.compress"="Zlib") 
AS SELECT 
    reflect("java.util.UUID", "randomUUID") coreid, 
    * 
FROM nyc_rfbsm_staging;

INSERT INTO TABLE nyc_rfbsm_core
SELECT
    coreid,
    RFID AS RFID,
    ROLE AS ROLE,
    BSMTIME.YEAR AS BSMTIMEYEAR,
    BSMTIME.MONTH AS BSMTIMEMONTH,
    BSMTIME.DAY AS BSMTIMEDAY,
    BSMTIME.HOUR AS BSMTIMEHOUR,
    BSMTIME.MINUTE AS BSMTIMEMINUTE,
    BSMTIME.SECOND AS BSMTIMESECOND,
    BSM.MSGHEADER.MYRFLEVEL AS BSMMSGHEADERMYRFLEVEL,
    BSM.MSGHEADER.AUTHENTICATED AS BSMMSGHEADERAUTHENTICATED,
    BSM.BSMMSG.COREDATA.MSGCNT AS BSMBSMMSGCOREDATAMSGCNT,
    BSM.BSMMSG.COREDATA.ID AS BSMBSMMSGCOREDATAID,
    BSM.BSMMSG.COREDATA.SECMARK AS BSMBSMMSGCOREDATASECMARK,
    BSM.BSMMSG.COREDATA.LAT AS BSMBSMMSGCOREDATALAT,
    BSM.BSMMSG.COREDATA.LONG AS BSMBSMMSGCOREDATALONG,
    BSM.BSMMSG.COREDATA.ELEV AS BSMBSMMSGCOREDATAELEV,
    BSM.BSMMSG.COREDATA.ACCURACY.SEMIMAJOR AS BSMBSMMSGCOREDATAACCURACYSEMIMAJOR,
    BSM.BSMMSG.COREDATA.ACCURACY.SEMIMINOR AS BSMBSMMSGCOREDATAACCURACYSEMIMINOR,
    BSM.BSMMSG.COREDATA.ACCURACY.ORIENTATION AS BSMBSMMSGCOREDATAACCURACYORIENTATION,
    BSM.BSMMSG.COREDATA.TRANSMISSION AS BSMBSMMSGCOREDATATRANSMISSION,
    BSM.BSMMSG.COREDATA.SPEED AS BSMBSMMSGCOREDATASPEED,
    BSM.BSMMSG.COREDATA.HEADING AS BSMBSMMSGCOREDATAHEADING,
    BSM.BSMMSG.COREDATA.ANGLE AS BSMBSMMSGCOREDATAANGLE,
    BSM.BSMMSG.COREDATA.ACCELSET.LONG AS BSMBSMMSGCOREDATAACCELSETLONG,
    BSM.BSMMSG.COREDATA.ACCELSET.LAT AS BSMBSMMSGCOREDATAACCELSETLAT,
    BSM.BSMMSG.COREDATA.ACCELSET.VERT AS BSMBSMMSGCOREDATAACCELSETVERT,
    BSM.BSMMSG.COREDATA.ACCELSET.YAW AS BSMBSMMSGCOREDATAACCELSETYAW,
    BSM.BSMMSG.COREDATA.BRAKES.WHEELBRAKES AS BSMBSMMSGCOREDATABRAKESWHEELBRAKES,
    BSM.BSMMSG.COREDATA.BRAKES.TRACTION AS BSMBSMMSGCOREDATABRAKESTRACTION,
    BSM.BSMMSG.COREDATA.BRAKES.ABS AS BSMBSMMSGCOREDATABRAKESABS,
    BSM.BSMMSG.COREDATA.BRAKES.SCS AS BSMBSMMSGCOREDATABRAKESSCS,
    BSM.BSMMSG.COREDATA.BRAKES.BRAKEBOOST AS BSMBSMMSGCOREDATABRAKESBRAKEBOOST,
    BSM.BSMMSG.COREDATA.BRAKES.AUXBRAKES AS BSMBSMMSGCOREDATABRAKESAUXBRAKES,
    BSM.BSMMSG.COREDATA.SIZE.WIDTH AS BSMBSMMSGCOREDATASIZEWIDTH,
    BSM.BSMMSG.COREDATA.SIZE.LENGTH AS BSMBSMMSGCOREDATASIZELENGTH
FROM nyc_rfbsm_tmp;

-- CREATE nyc_rfbsm part ii tmp

CREATE TABLE nyc_rfbsm_partii_tmp 
STORED AS ORC tblproperties ("orc.compress" = "Zlib")
AS SELECT 
    reflect("java.util.UUID","randomUUID") partiiid,
    coreid,
    partii
FROM nyc_rfbsm_tmp 
LATERAL VIEW explode(BSM.BSMMSG.PARTII) sequenceArray AS partii;

-- insert part ii data into nyc_rfbsm part ii table

INSERT INTO TABLE nyc_rfbsm_partii
SELECT 
    partiiid,
    coreid,
    partii.PARTIIID AS ID,
    partii.PARTIIVALUE.PATHPREDICTION.RADIUSOFCURVE AS PATHPREDICTIONRADIUSOFCURVE,
    partii.PARTIIVALUE.PATHPREDICTION.CONFIDENCE AS PATHPREDICTIONCONFIDENCE,
    partii.PARTIIVALUE.CLASSIFICATION AS CLASSIFICATION,
    partii.PARTIIVALUE.VEHICLEDATA.HEIGHT AS VEHICLEDATAHEIGHT,
    partii.PARTIIVALUE.VEHICLEDATA.MASS AS VEHICLEDATAMASS
FROM nyc_rfbsm_partii_tmp;

-- Insert crumb data into nyc_rfbsm part ii crumb data

INSERT INTO TABLE nyc_rfbsm_partii_crumbdata
SELECT
    partiiid,
    coreid,
    cd.LATOFFSET AS LATOFFSET,
    cd.LONOFFSET AS LONOFFSET,
    cd.ELEVATIONOFFSET AS ELEVATIONOFFSET,
    cd.TIMEOFFSET AS TIMEOFFSET
FROM nyc_rfbsm_partii_tmp
LATERAL VIEW explode (partii.PARTIIVALUE.PATHHISTORY.CRUMBDATA) cdArray AS cd;

--DROP temperary tables. 

DROP TABLE IF EXISTS nyc_rfbsm_tmp;
DROP TABLE IF EXISTS nyc_rfbsm_partii_tmp;